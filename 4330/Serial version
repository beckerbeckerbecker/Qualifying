#Serial version (finalproject_ser.cpp):
#Compile ( ex. g++ -o ser finalproject_ser.cpp ), Run the executable

#converted from C++ to Python from 4330/6330 Project by Andrew Becker, et al.

import math   # The math library is used for mathematical functions
import random # Random is used to generate random numbers
import time   # Time is used to seed the random number generator.

"""     Constants and Global Variables:
This section defines constants (MASTER and Max) 
        and declares global variables 
 (x, y, Scount, Icount, Rcount, and Population) 
        which are used throughout the program.     """

MASTER = 0
Max = 100

x, y = 0, 0
Scount, Icount, Rcount = 0, 0, 0

Population = [['' for _ in range(Max)] for _ in range(Max)]

def initPopGrid(pop):
    global x, y
    dbPop = float(pop)
    popRoot = math.sqrt(dbPop)
    x = math.ceil(popRoot)
    y = math.ceil(popRoot)
    
    # initialize people
    for i in range(x):
        for j in range(y):
            random.seed(time.time())
            randNum = random.randint(1, 3)
            
            if randNum == 1:
                Population[i][j] = 'S'
            elif randNum == 2:
                Population[i][j] = 'I'
            elif randNum == 3:
                Population[i][j] = 'R'

"""     Function calculate:
This function simulates the spread of the disease 
 over a given number of days using the SEIR model. 
It uses the infection rate and recovery rate to update the population's state 
and prints the fractions of the population in each state for each day.       """

def calculate(days, population):
    dt = 1          # time step in days
    beta = 1 / 5    # infection rate
    gamma = 1 / 14  # recovery rate
    
    S = [0]*Scount
    I = [0]*Icount
    R = [0]*Rcount

    I[0] = Icount/population         # initial infective population
    S[0] = Scount/population - I[0]  # initial susceptible population
    R[0] = Rcount/population         # initial recovered population
    
    # print initials
    print(f"Fraction of population susceptible to infection at beginning of observation : {S[0]}")
    print(f"Fraction of population infected at beginning of observation : {I[0]}")
    print(f"Fraction of population recovered at beginning of observation : {R[0]}")
    
    for i in range(days):
        S[i+1] = S[i] - beta * (S[i] * I[i]) * dt
        I[i+1] = I[i] + (beta * S[i] * I[i] - gamma * I[i]) * dt
        R[i+1] = R[i] + gamma * I[i] * dt
        
        # print values
        print(f"Fraction of population susceptible to infection at day {i+1}: {S[i]}")
        print(f"Fraction of population infected at day {i+1}: {I[i]}")
        print(f"Fraction of population recovered at day {i+1}: {R[i]}")

"""
**Function main:** 
This is the main function which is the entry point of the program. 
It's a simplified version of the main function from the original C code.

*   It begins by checking the number of tasks. 
If it's less than 2 or greater than 10, it prints an error message and exits.

*   Next, it asks for user input for the population size and number of days.

*   It initializes the population grid, and divides the population among the tasks.

*   If the task is the master task, it prints out a bunch of predetermined values 
(which doesn't seem to serve any real purpose), 
sends population portions to worker tasks and receives processed portions back, 
then runs the calculate function.

*   If the task is not the master task, it receives a portion of the population, 
counts the number of 'S', 'I', and 'R' states in its portion, 
then sends this data back to the master task.

"""

def main():
    global Scount, Icount, Rcount
    numtasks = 2  # we set this to 2 as a default but in MPI this would be determined by the system

    if numtasks < 2:
        print(f"ERROR: Number of tasks set to {numtasks}")
        print("Need at least 2 tasks! Quitting...")
        return

    if numtasks > 10:
        print(f"ERROR: Number of tasks set to {numtasks}")
        print("Number of tasks must be below 10. Quitting...")
        return

    popPortion = ['']*x*y

    if MASTER == 0:
        population = int(input("Enter a population size between 4 and 100"))
